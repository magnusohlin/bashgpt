#!/bin/bash

# Define ChatGPT API endpoint
ENDPOINT="https://api.openai.com/v1/chat/completions"

# ANSI escape codes for colors and styles
RED='\033[31m'
GREEN='\033[32m'
YELLOW='\033[33m'
BLUE='\033[34m'
MAGENTA='\033[35m'
CYAN='\033[36m'
RESET='\033[0m'
BOLD='\033[1m'

# Separator
separator="${CYAN}----------------------------------------${RESET}"

# Initialize chat history
chat_history=""

# Read API key from environment variable or command-line argument
API_KEY="${OPENAI_API_KEY:-}"
ENGINE="gpt-3.5-turbo"

while getopts ":k:e:" opt; do
  case $opt in
    k)
      API_KEY="$OPTARG"
      ;;
    e)
      ENGINE="$OPTARG"
      ;;
    \?)
      echo "Usage: gpt [-k api_key] [-e engine]"
      exit 1
      ;;
  esac
done

if [ -z "$API_KEY" ]; then
  echo "Error: API key not provided."
  echo "Please set the OPENAI_API_KEY environment variable or use the -k option followed by your key."
  exit 1
fi

# Get the first user input
echo -e "$separator\n"
echo -e "${BOLD}${BLUE}ʕ·ᴥ·ʔ Welcome to bashGPT!${RESET}"
echo -e "\n\n${BOLD}${MAGENTA}// Type 'vi' or 'code' in the prompt to open${RESET}"
echo -e "${BOLD}${MAGENTA}// the latest response in vim or vscode.${RESET}"
echo -e "\n$separator"
echo -e "\n"
read -p "user  > " prompt

# Function to handle streaming response
handle_streaming_response() {
  response=""
  print_prompt=true
  printf "${BOLD}${GREEN}ʕᵔᴥᵔʔ > ${RESET}"

  while IFS= read -r line; do
    if [[ $line == *"data:"* ]]; then
      content=$(echo "$line" | sed 's/^data: //')

      if echo "$content" | grep -q "\[DONE\]"; then
        break
      fi

      if echo "$content" | grep -q "delta"; then
        delta_content=$(echo "$content" | jq -r '.choices[0].delta.content // ""')

        if [ ! -z "$delta_content" ]; then
          response+="$delta_content"
          printf "$delta_content"
        fi
      fi

      if echo "$content" | grep -q "finish_reason"; then
        finish_reason=$(echo "$content" | jq -r '.choices[0].finish_reason')

        if [[ "$finish_reason" != "stop" ]]; then
          print_prompt=true
        fi
      fi
    fi
  done
}

end_loop=false

while ! $end_loop; do
  # Add user message to chat history
  chat_history="${chat_history}{\"role\": \"user\", \"content\": \"${prompt}\"},"

  # Call ChatGPT API with streaming
  response=""
  (curl -s --http2 --no-buffer -X POST $ENDPOINT \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $API_KEY" \
    -d "{\"model\": \"$ENGINE\", \"messages\": [${chat_history%?}], \"temperature\": 0.7, \"stream\": true}" \
  ) | handle_streaming_response

  # Add AI message to chat history
  chat_history+="{\"role\": \"assistant\", \"content\": \"$(echo -e "${response}" | tr -d '\n')\"},"

  echo
  read -p "user  > " prompt

  if [ "$prompt" == "vi" ]; then
    # Open the last response in vim as an unsaved file
    echo "$response" | vim -
    end_loop=true
    break
  fi

  if [ "$prompt" == "code" ]; then
    # Open the last response in Visual Studio Code as a new unsaved file
    echo "$response" | code --new-window --wait -
    end_loop=true
    break
  fi
done
